#!/bin/bash
#=================================================================================================|
#
#   Copyright (c) 2011, Marsh Ray
#
#   Permission to use, copy, modify, and/or distribute this software for any
#   purpose with or without fee is hereby granted, provided that the above
#   copyright notice and this permission notice appear in all copies.
#
#   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
#   OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
#=================================================================================================|

set -o errexit
#set -o xtrace

#	Command-line options.
unset -v NO_TEST
for arg in '--debug' "$@"
do
	if [[ "$arg" == "--debug" ]]; then
		BUILD_TYPE=debug
	elif [[ "$arg" == "--release" ]]; then
		BUILD_TYPE=release
	elif [[ "$arg" == "--profile" ]]; then
		BUILD_TYPE=profile
	elif [[ "$arg" == "--no-test" ]]; then
		NO_TEST="--no-test"
	elif [[ "$arg" == "--help" ]]; then
		echo "Other valid command-line arguments are --debug, --release, --profile, and --no-test."
		exit 1
	else
		echo "Unrecognized command-line argument: $arg"
		exit 1
	fi
done

#	You can specify the qak/src directory in the environment variable QAK_SRC_DIR,
#	or this script will try to figure it out from its own location.

THIS_SCRIPT=$(readlink -n -f "$0")
echo "THIS_SCRIPT=$THIS_SCRIPT"

THIS_SCRIPT_DIR=$(dirname "$THIS_SCRIPT")
echo "THIS_SCRIPT_DIR=$THIS_SCRIPT_DIR"

if [[ ! -d "$QAK_SRC_DIR" ]]; then QAK_SRC_DIR=$(dirname "$THIS_SCRIPT"); fi
echo "QAK_SRC_DIR=$QAK_SRC_DIR"
export QAK_SRC_DIR

#	You can specify the build root directory in the environment variable QAK_BUILD_ROOT_DIR,
#	or it uses a directory named 'build' as a sibling of $QAK_SRC_DIR

if [[ -z "$QAK_BUILD_ROOT_DIR" ]]; then
	QAK_BUILD_ROOT_DIR=$(readlink -f "$QAK_SRC_DIR/..")"/build"
	unset -v QAK_BUILD_DIR
fi

#	The build directory is named after the build type, under $QAK_BUILD_ROOT_DIR
QAK_BUILD_DIR="$QAK_BUILD_ROOT_DIR/$BUILD_TYPE"

echo "QAK_BUILD_ROOT_DIR=$QAK_BUILD_ROOT_DIR"
echo "QAK_BUILD_DIR=$QAK_BUILD_DIR"


SUCCESS_FLAG=$QAK_BUILD_DIR/success.out
if [[ -f "$SUCCESS_FLAG" ]]; then rm "$SUCCESS_FLAG"; fi

(make --no-print-directory -C "$QAK_BUILD_DIR" && touch "$SUCCESS_FLAG")\
|& grep -v 'In file included from'
#	Vim doesn't handle ^^^ this one error message format well currently.

if [[ ! -f "$SUCCESS_FLAG" ]]; then
	exit 1
fi

if [[ -z "$NO_TEST" ]]; then
	CTEST_OUTPUT_ON_FAILURE=1
	export CTEST_OUTPUT_ON_FAILURE
	
	#	Call make test via 'nice' in case a test starts running away with system resources.
	nice -n 10 make -C "$QAK_BUILD_DIR" test
fi
